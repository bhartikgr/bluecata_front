{"version":3,"file":"static/js/1929.c7f40741.chunk.js","mappings":"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","sources":["pages/User/Investor/RecordRoundCaptable.jsx","../node_modules/react-chartjs-2/src/utils.ts","../node_modules/react-chartjs-2/src/chart.tsx","../node_modules/react-chartjs-2/src/typedCharts.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport TopBar from \"../../../components/Users/TopBar\";\r\nimport ModuleSideNav from \"../../../components/Users/ModuleSideNav.jsx\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  SectionWrapper,\r\n  Wrapper,\r\n} from \"../../../components/Styles/MainHeadStyles.js\";\r\nimport axios from \"axios\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { API_BASE_URL } from \"../../../config/config.js\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\nexport default function RecordRoundCaptable() {\r\n  const navigate = useNavigate();\r\n  const storedUsername = localStorage.getItem(\"SignatoryLoginData\");\r\n  const userLogin = JSON.parse(storedUsername);\r\n  const API_URL_CAPTABLE = API_BASE_URL + \"api/user/capitalround/\";\r\n  document.title = \"Round Cap Table\";\r\n  const { id } = useParams();\r\n\r\n  const [capTableData, setCapTableData] = useState(null);\r\n  const [roundData, setRoundData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [isCollapsed, setIsCollapsed] = useState(false);\r\n\r\n  useEffect(() => {\r\n    getCapTableData();\r\n  }, [id]);\r\n\r\n  const getCapTableData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    let formData = {\r\n      company_id: userLogin.companies[0].id,\r\n      round_id: id,\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        API_URL_CAPTABLE + \"getRoundCapTableSingleRecord\",\r\n        formData,\r\n        {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n\r\n      if (res.data.success) {\r\n        setCapTableData(res.data.capTable);\r\n        setRoundData(res.data.round);\r\n      } else {\r\n        setError(res.data.message || \"Failed to load cap table\");\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || \"Error loading cap table data\");\r\n      console.error(\"Error:\", err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatCurrency = (amount, currency = \"USD\") => {\r\n    // Clean currency code - remove spaces and symbols\r\n    const cleanCurrency = currency?.trim().split(\" \")[0] || \"USD\";\r\n\r\n    // Valid currency codes\r\n    const validCurrencies = [\"USD\", \"CAD\", \"EUR\", \"GBP\", \"INR\", \"AUD\", \"JPY\"];\r\n    const currencyCode = validCurrencies.includes(cleanCurrency.toUpperCase())\r\n      ? cleanCurrency.toUpperCase()\r\n      : \"USD\";\r\n\r\n    try {\r\n      return new Intl.NumberFormat(\"en-US\", {\r\n        style: \"currency\",\r\n        currency: currencyCode,\r\n        minimumFractionDigits: 2,\r\n      }).format(amount || 0);\r\n    } catch (error) {\r\n      // Fallback if currency is still invalid\r\n      return `${currencyCode} ${parseFloat(amount || 0).toFixed(2)}`;\r\n    }\r\n  };\r\n\r\n  const formatNumber = (num) => {\r\n    return new Intl.NumberFormat(\"en-US\").format(num || 0);\r\n  };\r\n\r\n  const formatPercentage = (percent) => {\r\n    return `${(percent || 0).toFixed(2)}%`;\r\n  };\r\n  const RoundCapChart = ({ chartData }) => {\r\n    const options = {\r\n      responsive: true,\r\n      plugins: {\r\n        legend: { display: false },\r\n        title: { display: true, text: \"Fully Diluted Ownership %\" },\r\n      },\r\n      scales: {\r\n        y: { beginAtZero: true, max: 100 },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <div style={{ height: \"300px\" }}>\r\n        <Bar data={chartData} options={options} />\r\n      </div>\r\n    );\r\n  };\r\n  const renderRoundZeroTable = () => {\r\n    if (!capTableData) return null;\r\n\r\n    return (\r\n      <div className=\"cap-table-section\">\r\n        <div className=\"card mb-4\">\r\n          <div className=\"card-header bg-primary text-white\">\r\n            <h4 className=\"mb-0\">{capTableData.roundType}</h4>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            <div className=\"row mb-4\">\r\n              <div className=\"col-md-4\">\r\n                <div className=\"info-box p-3 border rounded\">\r\n                  <small className=\"text-muted\">Share Class</small>\r\n                  <h5>{capTableData.shareClass || \"N/A\"}</h5>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"info-box p-3 border rounded\">\r\n                  <small className=\"text-muted\">Price Per Share</small>\r\n                  <h5>\r\n                    {formatCurrency(\r\n                      capTableData.calculations.sharePrice,\r\n                      capTableData.currency\r\n                    )}\r\n                  </h5>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-4\">\r\n                <div className=\"info-box p-3 border rounded\">\r\n                  <small className=\"text-muted\">Total Shares</small>\r\n                  <h5>{formatNumber(capTableData.totalShares)}</h5>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <RoundCapChart chartData={capTableData.chartData} />\r\n\r\n            <h5 className=\"mt-4 mb-3\">Shareholders</h5>\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped table-hover\">\r\n                <thead className=\"table-dark\">\r\n                  <tr>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th className=\"text-end\">Shares</th>\r\n                    <th className=\"text-end\">Ownership %</th>\r\n                    <th className=\"text-end\">Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {capTableData.shareholders.map((sh, idx) => (\r\n                    <tr key={idx}>\r\n                      <td>\r\n                        <strong>{sh.name}</strong>\r\n                      </td>\r\n                      <td>{sh.email || \"-\"}</td>\r\n                      <td className=\"text-end\">{formatNumber(sh.shares)}</td>\r\n                      <td className=\"text-end\">\r\n                        <span className=\"badge bg-info\">\r\n                          {formatPercentage(sh.ownership)}\r\n                        </span>\r\n                      </td>\r\n                      <td className=\"text-end\">\r\n                        {formatCurrency(sh.value, capTableData.currency)}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                  <tr className=\"table-secondary fw-bold\">\r\n                    <td colSpan=\"2\">TOTAL</td>\r\n                    <td className=\"text-end\">\r\n                      {formatNumber(capTableData.totalShares)}\r\n                    </td>\r\n                    <td className=\"text-end\">\r\n                      {formatPercentage(\r\n                        capTableData.shareholders.reduce(\r\n                          (sum, sh) => sum + sh.ownership,\r\n                          0\r\n                        )\r\n                      )}\r\n                    </td>\r\n                    <td className=\"text-end\">\r\n                      {formatCurrency(\r\n                        capTableData.totalValue,\r\n                        capTableData.currency\r\n                      )}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderSeedRoundTable = () => {\r\n    if (!capTableData || !capTableData.calculations) return null;\r\n\r\n    const calc = capTableData.calculations;\r\n    const currency = capTableData.currency || \"USD\";\r\n\r\n    // Correct totals\r\n    const totalShares = calc.totalFullyDilutedShares;\r\n    const totalValue = capTableData.shareholders.reduce(\r\n      (sum, s) => sum + s.value,\r\n      0\r\n    );\r\n\r\n    return (\r\n      <div className=\"cap-table-section\">\r\n        <div className=\"card mb-4\">\r\n          <div className=\"card-header bg_color text-white\">\r\n            <h4 className=\"mb-0\">{capTableData.roundType}</h4>\r\n          </div>\r\n          <div className=\"card-body\">\r\n            {/* Round Summary */}\r\n            <h5 className=\"mb-3\">Round Summary</h5>\r\n            <div className=\"row mb-4\">\r\n              <div className=\"col-md-3\">\r\n                <div className=\"info-box p-3 border rounded bg-light\">\r\n                  <small className=\"text-muted\">Investment Size</small>\r\n                  <h5>{formatCurrency(calc.investmentSize, currency)}</h5>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <div className=\"info-box p-3 border rounded bg-light\">\r\n                  <small className=\"text-muted\">Pre-Money Valuation</small>\r\n                  <h5>{formatCurrency(calc.preMoneyValuation, currency)}</h5>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <div className=\"info-box p-3 border rounded bg-light\">\r\n                  <small className=\"text-muted\">Post-Money Valuation</small>\r\n                  <h5>{formatCurrency(calc.postMoneyValuation, currency)}</h5>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <div className=\"info-box p-3 border rounded bg-light\">\r\n                  <small className=\"text-muted\">Investor Ownership</small>\r\n                  <h5>{formatPercentage(calc.investorOwnershipPercent)}</h5>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Other Round Details */}\r\n            <div className=\"row mb-4\">\r\n              <div className=\"col-md-3\">\r\n                <div className=\"info-box p-3 border rounded\">\r\n                  <small className=\"text-muted\">Share Price</small>\r\n                  <h6>{formatCurrency(calc.sharePrice, currency)}</h6>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <div className=\"info-box p-3 border rounded\">\r\n                  <small className=\"text-muted\">New Shares</small>\r\n                  <h6>{formatNumber(calc.newShares)}</h6>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <div className=\"info-box p-3 border rounded\">\r\n                  <small className=\"text-muted\">Options Pool</small>\r\n                  <h6>{formatPercentage(calc.optionsPoolPercent)}</h6>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3\">\r\n                <div className=\"info-box p-3 border rounded\">\r\n                  <small className=\"text-muted\">Liquidation Multiple</small>\r\n                  <h6>{calc.liquidationMultiple}X</h6>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <RoundCapChart chartData={capTableData.chartData} />\r\n            {/* Capitalization Table */}\r\n            <h5 className=\"mt-4 mb-3\">Capitalization Table</h5>\r\n            <div className=\"table-responsive\">\r\n              <table className=\"table table-striped table-hover\">\r\n                <thead className=\"table-dark\">\r\n                  <tr>\r\n                    <th>Name</th>\r\n                    <th>Type</th>\r\n                    <th>Round</th>\r\n                    <th className=\"text-end\">Shares</th>\r\n                    <th className=\"text-end\">Ownership %</th>\r\n                    <th className=\"text-end\">Value</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {capTableData.shareholders.map((sh, idx) => (\r\n                    <tr\r\n                      key={idx}\r\n                      className={sh.type === \"New\" ? \"table-success\" : \"\"}\r\n                    >\r\n                      <td>\r\n                        <strong>{sh.name}</strong>\r\n                        {sh.type === \"New\" && (\r\n                          <span className=\"badge bg-success ms-2\">New</span>\r\n                        )}\r\n                      </td>\r\n                      <td>{sh.type}</td>\r\n                      <td>\r\n                        <small>{sh.round || \"-\"}</small>\r\n                      </td>\r\n                      <td className=\"text-end\">{formatNumber(sh.shares)}</td>\r\n                      <td className=\"text-end\">\r\n                        <span\r\n                          className={`badge ${\r\n                            sh.type === \"Options Pool\"\r\n                              ? \"bg-warning\"\r\n                              : sh.type === \"New\"\r\n                              ? \"bg-success\"\r\n                              : \"bg-info\"\r\n                          }`}\r\n                        >\r\n                          {formatPercentage(sh.ownership)}\r\n                        </span>\r\n                      </td>\r\n                      <td className=\"text-end\">\r\n                        {formatCurrency(sh.value, currency)}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n\r\n                  {/* Footer Totals */}\r\n                  <tr className=\"table-secondary fw-bold\">\r\n                    <td colSpan=\"3\">TOTAL FULLY DILUTED</td>\r\n                    <td className=\"text-end\">{formatNumber(totalShares)}</td>\r\n                    <td className=\"text-end\">{formatPercentage(100)}</td>\r\n                    <td className=\"text-end\">\r\n                      {formatCurrency(totalValue, currency)}\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            {/* Pre-Investment Summary */}\r\n            <div className=\"alert alert-info mt-4\">\r\n              <h6 className=\"alert-heading\">Pre-Investment Capitalization</h6>\r\n              <p className=\"mb-0\">\r\n                Total Shares:{\" \"}\r\n                <strong>{formatNumber(calc.previousTotalShares)}</strong> |\r\n                Valuation:{\" \"}\r\n                <strong>\r\n                  {formatCurrency(calc.preMoneyValuation, currency)}\r\n                </strong>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div className=\"fullpage d-block\">\r\n        <div className=\"d-flex align-items-start gap-0\">\r\n          <ModuleSideNav\r\n            isCollapsed={isCollapsed}\r\n            setIsCollapsed={setIsCollapsed}\r\n          />\r\n          <div\r\n            className={`global_view ${isCollapsed ? \"global_view_col\" : \"\"}`}\r\n          >\r\n            <TopBar />\r\n            <SectionWrapper className=\"d-block p-md-4 p-3\">\r\n              <div className=\"container-fluid\">\r\n                <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n                  <h2>Capitalization Table</h2>\r\n                  <button\r\n                    className=\"btn btn-secondary\"\r\n                    onClick={() => navigate(-1)}\r\n                  >\r\n                    Back to Rounds\r\n                  </button>\r\n                </div>\r\n\r\n                {loading && (\r\n                  <div className=\"text-center py-5\">\r\n                    <div className=\"spinner-border text-primary\" role=\"status\">\r\n                      <span className=\"visually-hidden\">Loading...</span>\r\n                    </div>\r\n                    <p className=\"mt-3\">Loading cap table data...</p>\r\n                  </div>\r\n                )}\r\n\r\n                {error && (\r\n                  <div className=\"alert alert-danger\" role=\"alert\">\r\n                    <strong>Error:</strong> {error}\r\n                  </div>\r\n                )}\r\n\r\n                {!loading && !error && capTableData && (\r\n                  <>\r\n                    {capTableData.roundType?.includes(\"Round 0\") ||\r\n                    capTableData.roundType?.includes(\"Incorporation\")\r\n                      ? renderRoundZeroTable()\r\n                      : renderSeedRoundTable()}\r\n                  </>\r\n                )}\r\n\r\n                {!loading && !error && !capTableData && (\r\n                  <div className=\"alert alert-warning\" role=\"alert\">\r\n                    No cap table data available for this round.\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </SectionWrapper>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n}\r\n","import type { MouseEvent } from 'react';\nimport type {\n  ChartType,\n  ChartData,\n  DefaultDataPoint,\n  ChartDataset,\n  ChartOptions,\n  Chart,\n} from 'chart.js';\n\nimport type { ForwardedRef } from './types.js';\n\nconst defaultDatasetIdKey = 'label';\n\nexport function reforwardRef<T>(ref: ForwardedRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nexport function setOptions<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(chart: Chart<TType, TData, TLabel>, nextOptions: ChartOptions<TType>) {\n  const options = chart.options;\n\n  if (options && nextOptions) {\n    Object.assign(options, nextOptions);\n  }\n}\n\nexport function setLabels<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextLabels: TLabel[] | undefined\n) {\n  currentData.labels = nextLabels;\n}\n\nexport function setDatasets<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  currentData: ChartData<TType, TData, TLabel>,\n  nextDatasets: ChartDataset<TType, TData>[],\n  datasetIdKey = defaultDatasetIdKey\n) {\n  const addedDatasets: ChartDataset<TType, TData>[] = [];\n\n  currentData.datasets = nextDatasets.map(\n    (nextDataset: Record<string, unknown>) => {\n      // given the new set, find it's current match\n      const currentDataset = currentData.datasets.find(\n        (dataset: Record<string, unknown>) =>\n          dataset[datasetIdKey] === nextDataset[datasetIdKey]\n      );\n\n      // There is no original to update, so simply add new one\n      if (\n        !currentDataset ||\n        !nextDataset.data ||\n        addedDatasets.includes(currentDataset)\n      ) {\n        return { ...nextDataset } as ChartDataset<TType, TData>;\n      }\n\n      addedDatasets.push(currentDataset);\n\n      Object.assign(currentDataset, nextDataset);\n\n      return currentDataset;\n    }\n  );\n}\n\nexport function cloneData<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(data: ChartData<TType, TData, TLabel>, datasetIdKey = defaultDatasetIdKey) {\n  const nextData: ChartData<TType, TData, TLabel> = {\n    labels: [],\n    datasets: [],\n  };\n\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n\n  return nextData;\n}\n\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getDatasetAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'dataset',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'nearest',\n    { intersect: true },\n    false\n  );\n}\n\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\nexport function getElementsAtEvent(\n  chart: Chart,\n  event: MouseEvent<HTMLCanvasElement>\n) {\n  return chart.getElementsAtEventForMode(\n    event.nativeEvent,\n    'index',\n    { intersect: true },\n    false\n  );\n}\n","import React, { useEffect, useRef, forwardRef } from 'react';\nimport { Chart as ChartJS } from 'chart.js';\nimport type { ChartType, DefaultDataPoint } from 'chart.js';\n\nimport type { ForwardedRef, ChartProps, BaseChartComponent } from './types.js';\nimport {\n  reforwardRef,\n  cloneData,\n  setOptions,\n  setLabels,\n  setDatasets,\n} from './utils.js';\n\nfunction ChartComponent<\n  TType extends ChartType = ChartType,\n  TData = DefaultDataPoint<TType>,\n  TLabel = unknown,\n>(\n  props: ChartProps<TType, TData, TLabel>,\n  ref: ForwardedRef<ChartJS<TType, TData, TLabel>>\n) {\n  const {\n    height = 150,\n    width = 300,\n    redraw = false,\n    datasetIdKey,\n    type,\n    data,\n    options,\n    plugins = [],\n    fallbackContent,\n    updateMode,\n    ...canvasProps\n  } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<ChartJS<TType, TData, TLabel> | null>(null);\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n\n    chartRef.current = new ChartJS(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options: options && { ...options },\n      plugins,\n    });\n\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    destroyChart();\n    setTimeout(renderChart);\n  }, [type]);\n\n  useEffect(() => {\n    renderChart();\n\n    return () => destroyChart();\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      role='img'\n      height={height}\n      width={width}\n      {...canvasProps}\n    >\n      {fallbackContent}\n    </canvas>\n  );\n}\n\nexport const Chart = forwardRef(ChartComponent) as BaseChartComponent;\n","import React, { forwardRef } from 'react';\nimport {\n  Chart as ChartJS,\n  LineController,\n  BarController,\n  RadarController,\n  DoughnutController,\n  PolarAreaController,\n  BubbleController,\n  PieController,\n  ScatterController,\n} from 'chart.js';\nimport type { ChartType, ChartComponentLike } from 'chart.js';\n\nimport type {\n  ChartProps,\n  ChartJSOrUndefined,\n  TypedChartComponent,\n} from './types.js';\nimport { Chart } from './chart.js';\n\nfunction createTypedChart<T extends ChartType>(\n  type: T,\n  registerables: ChartComponentLike\n) {\n  ChartJS.register(registerables);\n\n  return forwardRef<ChartJSOrUndefined<T>, Omit<ChartProps<T>, 'type'>>(\n    (props, ref) => <Chart {...props} ref={ref} type={type} />\n  ) as TypedChartComponent<T>;\n}\n\nexport const Line = /* #__PURE__ */ createTypedChart('line', LineController);\n\nexport const Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\n\nexport const Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\n\nexport const Doughnut = /* #__PURE__ */ createTypedChart(\n  'doughnut',\n  DoughnutController\n);\n\nexport const PolarArea = /* #__PURE__ */ createTypedChart(\n  'polarArea',\n  PolarAreaController\n);\n\nexport const Bubble = /* #__PURE__ */ createTypedChart(\n  'bubble',\n  BubbleController\n);\n\nexport const Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\n\nexport const Scatter = /* #__PURE__ */ createTypedChart(\n  'scatter',\n  ScatterController\n);\n"],"names":["RecordRoundCaptable","_capTableData$roundTy","_capTableData$roundTy2","navigate","useNavigate","storedUsername","localStorage","getItem","userLogin","JSON","parse","API_URL_CAPTABLE","API_BASE_URL","document","title","id","useParams","capTableData","setCapTableData","useState","roundData","setRoundData","loading","setLoading","error","setError","isCollapsed","setIsCollapsed","useEffect","getCapTableData","async","formData","company_id","companies","round_id","res","axios","post","headers","Accept","data","success","capTable","round","message","err","_err$response","_err$response$data","response","console","formatCurrency","amount","currency","arguments","length","undefined","cleanCurrency","trim","split","currencyCode","includes","toUpperCase","Intl","NumberFormat","style","minimumFractionDigits","format","parseFloat","toFixed","formatNumber","num","formatPercentage","percent","RoundCapChart","_ref","chartData","_jsx","height","children","Bar","options","responsive","plugins","legend","display","text","scales","y","beginAtZero","max","Wrapper","className","_jsxs","ModuleSideNav","TopBar","SectionWrapper","onClick","role","_Fragment","roundType","shareClass","calculations","sharePrice","totalShares","shareholders","map","sh","idx","name","email","shares","ownership","value","colSpan","reduce","sum","totalValue","renderSeedRoundTable","calc","totalFullyDilutedShares","s","investmentSize","preMoneyValuation","postMoneyValuation","investorOwnershipPercent","newShares","optionsPoolPercent","liquidationMultiple","type","previousTotalShares","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","defaultDatasetIdKey","reforwardRef","ref","current","setLabels","currentData","nextLabels","labels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","datasets","nextDataset","currentDataset","find","dataset","push","Object","assign","cloneData","nextData","ChartComponent","props","width","redraw","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","Chart$1","destroyChart","destroy","chart","nextOptions","setOptions","config","setTimeout","update","React","Chart","forwardRef","createTypedChart","registerables","BarController","Pie","PieController"],"sourceRoot":""}