{"version":3,"file":"static/js/2341.3bbe054b.chunk.js","mappings":"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","sources":["pages/search/Searchgroup.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Headertwo from \"../../components/Headertwo\";\nimport { LeftsidebarSearch } from \"../../components/LeftsidebarSearch\";\nimport { SlOptions } from \"react-icons/sl\";\nimport { useTranslation } from \"react-i18next\";\nimport \"../../i18n\";\nimport chat from \"../../assets/images/chatpost.png\";\nimport { FaRegHeart, FaHeart } from \"react-icons/fa\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useLocation } from \"react-router-dom\";\nimport MediaRenderer from \"../../components/MediaRenderer\";\nimport { DateTime } from \"luxon\";\nfunction Searchgroup() {\n  const navigate = useNavigate();\n  var apiUrlGroup = \"https://backend.amourette.no/api/groups/\";\n  var apiUrlMembers = \"https://backend.amourette.no/api/members/\";\n  const commentRefs = useRef([]); // Ref to manage scroll to the last comment\n  const [deleteMessage, setdeleteMessage] = useState(\"\");\n  const [AllfriendId, setAllfriendId] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const searchQuery = queryParams.get(\"q\");\n  const [refreshNotifications, setRefreshNotifications] = useState(false);\n  const [isGroup, setGroup] = useState([]);\n  // const [commentInputs, setCommentInputs] = useState(\n  //   Array(isGroup.length).fill(\"\")\n  // );\n  const [restrictedStates, setRestrictedStates] = useState([]);\n  const [isPopupOpen_delete, setisPopupOpen_delete] = useState(false);\n  const [postId, setpostId] = useState(\"\");\n  const [LoginData, setLoginData] = useState(\"\");\n  var apiUrl = \"https://backend.amourette.no/api/members/\";\n  const { t, i18n } = useTranslation();\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem(\"language\") || \"en\"; // Default to 'en' if no language is saved\n    // Change the language if it's not already the current language\n    if (i18n.language !== savedLanguage) {\n      i18n.changeLanguage(savedLanguage);\n    }\n  }, [i18n, t]);\n  const openModal = () => setModalOpen(true);\n  useEffect(() => {\n    // Check if the username key exists in session storage\n    const storedUsername = localStorage.getItem(\"userLogin\");\n    const userLogin = JSON.parse(storedUsername);\n    console.log(userLogin);\n    console.log(\"test\");\n    if (userLogin === null) {\n      navigate(\"/login\");\n    }\n  }, []);\n  useEffect(() => {\n    getAllfriends();\n  }, []);\n  const getAllfriends = async () => {\n    const storedUsername = localStorage.getItem(\"userLogin\");\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null;\n    let formData = {\n      user_id: userLogin.id,\n    };\n    try {\n      const res = await axios.post(apiUrlMembers + \"getAllfriends\", formData, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\", // Ensure the content type is JSON\n        },\n      });\n      var respo = res.data.results;\n      const friendUserIds = respo.map((friend) => friend.id);\n      console.log(friendUserIds, \"dd\");\n      setAllfriendId(friendUserIds);\n    } catch (err) {\n      // Enhanced error handling\n      if (err.response) {\n      } else if (err.request) {\n        console.error(\"Request data:\", err.request);\n      } else {\n        console.error(\"Error message:\", err.message);\n      }\n    }\n  };\n  const formateTime = (dateString) => {\n    if (!dateString) return null;\n\n    // Treat input as a Europe/Oslo time (even though it has 'Z')\n    // Remove the 'Z' if it exists\n    const cleanDateString = dateString.replace(/Z$/, \"\");\n\n    // Parse it as if it's Oslo local time (not UTC)\n    const osloTime = DateTime.fromISO(cleanDateString, { zone: \"Europe/Oslo\" });\n\n    if (!osloTime.isValid) {\n      console.error(\"Invalid Oslo Time:\", osloTime.invalidExplanation);\n      return \"Invalid Date\";\n    }\n\n    // Convert to current system's local timezone\n    const localTime = osloTime.setZone(\n      Intl.DateTimeFormat().resolvedOptions().timeZone\n    );\n\n    const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n    console.log(osloTime);\n    const now = DateTime.now().setZone(userTimeZone);\n    const localPostTime = localTime.toFormat(\"HH:mm\");\n\n    const diffInMinutes = now.diff(localTime, \"minutes\").minutes;\n    const diffInHours = now.diff(localTime, \"hours\").hours;\n    const diffInDays = now.diff(localTime, \"days\").days;\n    const diffInWeeks = Math.floor(diffInDays / 7);\n    const diffInMonths = Math.floor(diffInDays / 30);\n    const diffInYears = Math.floor(diffInDays / 365);\n\n    if (diffInMinutes < 60) return `${localPostTime}`;\n    if (diffInHours < 24) return `${localPostTime}`;\n    if (Math.floor(diffInDays) === 1) return `Yesterday at ${localPostTime}`;\n    if (diffInDays < 7) return `${Math.floor(diffInDays)}d ${localPostTime}`;\n    if (diffInWeeks < 4) return `${diffInWeeks}w ${localPostTime}`;\n    if (diffInMonths < 12) return `${diffInMonths}m ${localPostTime}`;\n    return `${diffInYears}y ${localPostTime}`;\n  };\n  const handlegroupPostDeleteconfirm = async (id) => {\n    setpostId(id);\n    setisPopupOpen_delete(true);\n    setdeleteMessage(\"Are you sure? You want delete this post\");\n  };\n\n  const restrictedWords = [\n    \"arse\",\n    \"arsehead\",\n    \"arsehole\",\n    \"ass\",\n    \"ass hole\",\n    \"asshole\",\n    \"bastard\",\n    \"bitch\",\n    \"bloody\",\n    \"bollocks\",\n    \"brotherfucker\",\n    \"bugger\",\n    \"bullshit\",\n    \"child-fucker\",\n    \"Christ on a bike\",\n    \"Christ on a cracker\",\n    \"cock\",\n    \"cocksucker\",\n    \"crap\",\n    \"cunt\",\n    \"dammit\",\n    \"damn\",\n    \"damned\",\n    \"damn it\",\n    \"dick\",\n    \"dick-head\",\n    \"dickhead\",\n    \"dumb ass\",\n    \"dumb-ass\",\n    \"dumbass\",\n    \"dyke\",\n    \"faggot\",\n    \"father-fucker\",\n    \"fatherfucker\",\n    \"fuck\",\n    \"fucker\",\n    \"fucking\",\n    \"god dammit\",\n    \"goddammit\",\n    \"God damn\",\n    \"god damn\",\n    \"goddamn\",\n    \"Goddamn\",\n    \"goddamned\",\n    \"goddamnit\",\n    \"godsdamn\",\n    \"holy shit\",\n    \"horseshit\",\n    \"in shit\",\n    \"jackarse\",\n    \"jack-ass\",\n    \"jackass\",\n    \"Jesus Christ\",\n    \"Jesus fuck\",\n    \"Jesus Harold Christ\",\n    \"Jesus H. Christ\",\n    \"Jesus, Mary and Joseph\",\n    \"Jesus wept\",\n    \"kike\",\n    \"mother fucker\",\n    \"mother-fucker\",\n    \"motherfucker\",\n    \"nigga\",\n    \"nigra\",\n    \"pigfucker\",\n    \"piss\",\n    \"prick\",\n    \"pussy\",\n    \"shit\",\n    \"shit ass\",\n    \"shite\",\n    \"sibling fucker\",\n    \"sisterfuck\",\n    \"sisterfucker\",\n    \"slut\",\n    \"son of a bitch\",\n    \"son of a whore\",\n    \"spastic\",\n    \"sweet Jesus\",\n    \"twat\",\n    \"wanker\",\n  ];\n  useEffect(() => {\n    if (searchQuery === null) {\n      var search = \"\";\n    } else {\n      var search = searchQuery;\n    }\n    getgroupsearch(search);\n  }, [AllfriendId]);\n  const getgroupsearch = async (search) => {\n    const storedUsername = localStorage.getItem(\"userLogin\");\n    const userLogin = storedUsername ? JSON.parse(storedUsername) : null;\n    const userIdsWithSelf = [...AllfriendId, userLogin.id]; // e.g., [3, 1, 5]\n    const userIdsString = userIdsWithSelf.join(\", \");\n    let formData = {\n      search: search,\n      user_id: userLogin.id,\n      user_ids: userIdsString,\n    };\n\n    console.log(formData);\n    try {\n      const res = await axios.post(\n        apiUrlGroup + \"get_postCommentSearch\",\n        formData,\n        {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\", // Ensure the content type is JSON\n          },\n        }\n      );\n      console.log(res.data.results, \"kkk\");\n      setGroup(res.data.results);\n    } catch (err) {\n      // Enhanced error handling\n      if (err.response) {\n      } else if (err.request) {\n        console.error(\"Request data:\", err.request);\n      } else {\n        console.error(\"Error message:\", err.message);\n      }\n    }\n  };\n  return (\n    <>\n      <Headertwo refreshNotifications={refreshNotifications} />\n      <section className=\"dashbox d-block\">\n        <div className=\"container-lg\">\n          <div className=\"row justify-content-between\">\n            <LeftsidebarSearch />\n\n            <div className=\"col-lg-8 col-xl-8\">\n              <div className=\"d-flex flex-column gap-3\">\n                {isGroup.length > 0 ? (\n                  isGroup.map((post, index) => (\n                    <div className=\"evname d-block\" key={index}>\n                      <div className=\"d-flex flex-column gap-2\">\n                        <Link\n                          target=\"_blank\"\n                          to={`/friend/${post.uid}`}\n                          className=\"d-flex gap-2 align-items-center\"\n                        >\n                          <div className=\"flex-shrink-0\">\n                            <div className=\"evephoto ofit rounded-circle overflow-hidden\">\n                              {post.group_owner_profile_image &&\n                              post.makeImagePrivate === 0 ? (\n                                <img\n                                  src={post.group_owner_profile_image}\n                                  alt=\"Selected\"\n                                />\n                              ) : (\n                                <img\n                                  src={require(\"../../assets/images/thumb.jpg\")}\n                                  alt=\"Profile\"\n                                />\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex-grow-1\">\n                            <div className=\"d-flex flex-column gap-1 evettimeheaing\">\n                              <p>\n                                <strong className=\"textcolor\">\n                                  {post.group_owner_username}{\" \"}\n                                </strong>\n                              </p>\n                              <h5>{formateTime(post.group_date)}</h5>\n                            </div>\n                          </div>\n                        </Link>\n                        <div className=\"d-block contpost\">\n                          <p>{post.gdescription}</p>\n                        </div>\n                        {post.gimage && (\n                          <Link\n                            className=\"postimgfull ofit rounded-2 overflow-hidden\"\n                            target=\"_blank\"\n                            to={`/group/${post.groupslug}`}\n                          >\n                            <MediaRenderer url={post.gimage} />\n                          </Link>\n                        )}\n                        <div className=\"d-flex justify-content-end\">\n                          <div className=\"d-flex gap-3 postchatheart\">\n                            <div className=\"d-flex align-items-center gap-3\">\n                              <button type=\"button\" className=\"btn fulw\">\n                                <img src={chat} alt=\"chatpic\" />\n                              </button>\n                              <p>{post.total_posts}</p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <p>{t(\"Nopostsavailable\")}.</p>\n                )}\n              </div>\n            </div>\n            <div className=\"col-lg-3 col-xl-3 sidefixedbox sticky-top h-100 d-none d-lg-block\"></div>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n\nexport default Searchgroup;\n"],"names":["navigate","useNavigate","useRef","deleteMessage","setdeleteMessage","useState","AllfriendId","setAllfriendId","modalOpen","setModalOpen","location","useLocation","searchQuery","URLSearchParams","search","get","refreshNotifications","setRefreshNotifications","isGroup","setGroup","restrictedStates","setRestrictedStates","isPopupOpen_delete","setisPopupOpen_delete","postId","setpostId","LoginData","setLoginData","t","i18n","useTranslation","useEffect","savedLanguage","localStorage","getItem","language","changeLanguage","storedUsername","userLogin","JSON","parse","console","log","getAllfriends","async","formData","user_id","id","friendUserIds","axios","post","apiUrlMembers","headers","Accept","data","results","map","friend","err","response","request","error","message","formateTime","dateString","cleanDateString","replace","osloTime","DateTime","fromISO","zone","isValid","invalidExplanation","localTime","setZone","Intl","DateTimeFormat","resolvedOptions","timeZone","userTimeZone","now","localPostTime","toFormat","diffInMinutes","diff","minutes","diffInHours","hours","diffInDays","days","diffInWeeks","Math","floor","diffInMonths","diffInYears","getgroupsearch","userIdsString","join","user_ids","res","apiUrlGroup","_jsxs","_Fragment","children","_jsx","Headertwo","className","LeftsidebarSearch","length","index","Link","target","to","uid","group_owner_profile_image","makeImagePrivate","src","alt","require","group_owner_username","group_date","gdescription","gimage","groupslug","MediaRenderer","url","type","chat","total_posts"],"sourceRoot":""}