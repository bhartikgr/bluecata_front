{"version":3,"file":"static/js/7451.663d0426.chunk.js","mappings":"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","sources":["../node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","../node_modules/@floating-ui/core/dist/floating-ui.core.mjs","../node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","../node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs"],"sourcesContent":["/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nconst yAxisSides = /*#__PURE__*/new Set(['top', 'bottom']);\nfunction getSideAxis(placement) {\n  return yAxisSides.has(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nconst lrPlacement = ['left', 'right'];\nconst rlPlacement = ['right', 'left'];\nconst tbPlacement = ['top', 'bottom'];\nconst btPlacement = ['bottom', 'top'];\nfunction getSideList(side, isStart, rtl) {\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rlPlacement : lrPlacement;\n      return isStart ? lrPlacement : rlPlacement;\n    case 'left':\n    case 'right':\n      return isStart ? tbPlacement : btPlacement;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect;\n  return {\n    width,\n    height,\n    top: y,\n    left: x,\n    right: x + width,\n    bottom: y + height,\n    x,\n    y\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          const ignoreCrossAxisOverflow = checkCrossAxis === 'alignment' ? initialSideAxis !== getSideAxis(nextPlacement) : false;\n          if (!ignoreCrossAxisOverflow ||\n          // We leave the current main axis only if every placement on that axis\n          // overflows the main axis.\n          overflowsData.every(d => getSideAxis(d.placement) === initialSideAxis ? d.overflows[0] > 0 : true)) {\n            // Try next placement and re-run the lifecycle.\n            return {\n              data: {\n                index: nextIndex,\n                overflows: overflowsData\n              },\n              reset: {\n                placement: nextPlacement\n              }\n            };\n          }\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nconst originSides = /*#__PURE__*/new Set(['left', 'top']);\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = originSides.has(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = originSides.has(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","import { rectToClientRect, arrow as arrow$1, autoPlacement as autoPlacement$1, detectOverflow as detectOverflow$1, flip as flip$1, hide as hide$1, inline as inline$1, limitShift as limitShift$1, offset as offset$1, shift as shift$1, size as size$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle as getComputedStyle$1, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getNodeScroll, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle$1(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle$1(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\nfunction getHTMLOffset(documentElement, scroll) {\n  const htmlRect = documentElement.getBoundingClientRect();\n  const x = htmlRect.left + scroll.scrollLeft - getWindowScrollBarX(documentElement, htmlRect);\n  const y = htmlRect.top + scroll.scrollTop;\n  return {\n    x,\n    y\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle$1(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Safety check: ensure the scrollbar space is reasonable in case this\n// calculation is affected by unusual styles.\n// Most scrollbars leave 15-18px of space.\nconst SCROLLBAR_MAX = 25;\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  const windowScrollbarX = getWindowScrollBarX(html);\n  // <html> `overflow: hidden` + `scrollbar-gutter: stable` reduces the\n  // visual width of the <html> but this is not considered in the size\n  // of `html.clientWidth`.\n  if (windowScrollbarX <= 0) {\n    const doc = html.ownerDocument;\n    const body = doc.body;\n    const bodyStyles = getComputedStyle(body);\n    const bodyMarginInline = doc.compatMode === 'CSS1Compat' ? parseFloat(bodyStyles.marginLeft) + parseFloat(bodyStyles.marginRight) || 0 : 0;\n    const clippingStableScrollbarWidth = Math.abs(html.clientWidth - body.clientWidth - bodyMarginInline);\n    if (clippingStableScrollbarWidth <= SCROLLBAR_MAX) {\n      width -= clippingStableScrollbarWidth;\n    }\n  } else if (windowScrollbarX <= SCROLLBAR_MAX) {\n    // If the <body> scrollbar is on the left, the width needs to be extended\n    // by the scrollbar amount so there isn't extra space on the right.\n    width += windowScrollbarX;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nconst absoluteOrFixed = /*#__PURE__*/new Set(['absolute', 'fixed']);\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y,\n      width: clippingAncestor.width,\n      height: clippingAncestor.height\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle$1(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle$1(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && absoluteOrFixed.has(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n\n  // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n  // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n  function setLeftRTLScrollbarOffset() {\n    offsets.x = getWindowScrollBarX(documentElement);\n  }\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      setLeftRTLScrollbarOffset();\n    }\n  }\n  if (isFixed && !isOffsetParentAnElement && documentElement) {\n    setLeftRTLScrollbarOffset();\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle$1(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle$1(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\nfunction rectsAreEqual(a, b) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const elementRectForRootMargin = element.getBoundingClientRect();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = elementRectForRootMargin;\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\n        // It's possible that even though the ratio is reported as 1, the\n        // element is not actually fully within the IntersectionObserver's root\n        // area anymore. This can happen under performance constraints. This may\n        // be a bug in the browser's IntersectionObserver implementation. To\n        // work around this, we compare the element's bounding rect now with\n        // what it was at the time we created the IntersectionObserver. If they\n        // are not equal then the element moved, so we refresh.\n        refresh();\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (_e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n","function hasWindow() {\n  return typeof window !== 'undefined';\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nconst invalidOverflowDisplayValues = /*#__PURE__*/new Set(['inline', 'contents']);\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !invalidOverflowDisplayValues.has(display);\n}\nconst tableElements = /*#__PURE__*/new Set(['table', 'td', 'th']);\nfunction isTableElement(element) {\n  return tableElements.has(getNodeName(element));\n}\nconst topLayerSelectors = [':popover-open', ':modal'];\nfunction isTopLayer(element) {\n  return topLayerSelectors.some(selector => {\n    try {\n      return element.matches(selector);\n    } catch (_e) {\n      return false;\n    }\n  });\n}\nconst transformProperties = ['transform', 'translate', 'scale', 'rotate', 'perspective'];\nconst willChangeValues = ['transform', 'translate', 'scale', 'rotate', 'perspective', 'filter'];\nconst containValues = ['paint', 'layout', 'strict', 'content'];\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  // https://drafts.csswg.org/css-transforms-2/#individual-transforms\n  return transformProperties.some(value => css[value] ? css[value] !== 'none' : false) || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || willChangeValues.some(value => (css.willChange || '').includes(value)) || containValues.some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nconst lastTraversableNodeNames = /*#__PURE__*/new Set(['html', 'body', '#document']);\nfunction isLastTraversableNode(node) {\n  return lastTraversableNodeNames.has(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getFrameElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isTopLayer, isWebKit };\n"],"names":["min","Math","max","round","floor","createCoords","v","x","y","oppositeSideMap","left","right","bottom","top","oppositeAlignmentMap","start","end","clamp","value","evaluate","param","getSide","placement","split","getAlignment","getOppositeAxis","axis","getAxisLength","yAxisSides","Set","getSideAxis","has","getAlignmentAxis","getOppositeAlignmentPlacement","replace","alignment","lrPlacement","rlPlacement","tbPlacement","btPlacement","getOppositeAxisPlacements","flipAlignment","direction","rtl","list","side","isStart","getSideList","map","concat","getOppositePlacement","getPaddingObject","padding","expandPaddingObject","rectToClientRect","rect","width","height","computeCoordsFromPlacement","_ref","reference","floating","sideAxis","alignmentAxis","alignLength","isVertical","commonX","commonY","commonAlign","coords","async","detectOverflow","state","options","_await$platform$isEle","platform","rects","elements","strategy","boundary","rootBoundary","elementContext","altBoundary","paddingObject","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","originSides","getCssDimensions","css","getComputedStyle$1","parseFloat","hasOffset","isHTMLElement","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","win","getWindow","isWebKit","visualViewport","offsetLeft","offsetTop","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","isFixed","floatingOffsetParent","shouldAddVisualOffsets","offsetWin","currentWin","currentIFrame","getFrameElement","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","leftScroll","getNodeScroll","scrollLeft","getHTMLOffset","documentElement","scroll","htmlRect","scrollTop","absoluteOrFixed","getClientRectFromClippingAncestor","clippingAncestor","html","clientWidth","clientHeight","visualViewportBased","windowScrollbarX","doc","ownerDocument","body","bodyStyles","getComputedStyle","bodyMarginInline","compatMode","marginLeft","marginRight","clippingStableScrollbarWidth","abs","getViewportRect","scrollWidth","scrollHeight","getDocumentRect","getInnerBoundingClientRect","hasFixedPositionAncestor","stopNode","parentNode","getParentNode","isLastTraversableNode","position","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","setLeftRTLScrollbarOffset","getNodeName","isOverflowElement","offsetRect","htmlOffset","isStaticPositioned","getTrueOffsetParent","polyfill","rawOffsetParent","isTopLayer","svgOffsetParent","isTableElement","isContainingBlock","getContainingBlock","topLayer","clippingAncestors","cache","cachedResult","get","result","getOverflowAncestors","filter","el","currentContainingBlockComputedStyle","elementIsFixed","currentNode","computedStyle","currentNodeIsContaining","ancestor","set","getClippingElementAncestors","this","_c","firstClippingAncestor","clippingRect","reduce","accRect","getElementRects","data","getOffsetParentFn","getDimensionsFn","getDimensions","floatingDimensions","getClientRects","Array","from","isRTL","rectsAreEqual","a","b","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","onMove","timeoutId","io","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","elementRectForRootMargin","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","_e","observe","observeMove","frameId","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","offset","name","fn","_middlewareData$offse","_middlewareData$arrow","middlewareData","diffCoords","mainAxisMulti","crossAxisMulti","rawValue","mainAxis","crossAxis","convertValueToCoords","arrow","alignmentOffset","shift","checkMainAxis","checkCrossAxis","limiter","detectOverflowOptions","overflow","mainAxisCoord","crossAxisCoord","maxSide","limitedCoords","enabled","flip","_middlewareData$flip","initialPlacement","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","initialSideAxis","isBasePlacement","oppositePlacement","getExpandedPlacements","hasFallbackAxisSideDirection","push","placements","overflows","overflowsData","sides","length","mainAlignmentSide","getAlignmentSides","every","_middlewareData$flip2","_overflowsData$filter","nextIndex","index","nextPlacement","d","reset","resetPlacement","sort","_overflowsData$filter2","currentSideAxis","acc","arrowDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","shouldAddOffset","centerOffset","computePosition","Map","mergedOptions","platformWithCache","config","middleware","validMiddleware","Boolean","statefulPlacement","resetCount","i","nextX","nextY","computePosition$1","hasWindow","window","node","isNode","nodeName","toLowerCase","_node$ownerDocument","defaultView","document","Node","Element","HTMLElement","isShadowRoot","ShadowRoot","invalidOverflowDisplayValues","overflowX","overflowY","display","test","tableElements","topLayerSelectors","some","selector","matches","transformProperties","willChangeValues","containValues","elementOrCss","webkit","containerType","backdropFilter","willChange","includes","contain","CSS","supports","lastTraversableNodeNames","scrollX","scrollY","assignedSlot","host","getNearestOverflowAncestor","traverseIframes","_node$ownerDocument2","scrollableAncestor","isBody","frameElement","parent","Object","getPrototypeOf"],"sourceRoot":""}