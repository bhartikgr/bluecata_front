{"version":3,"file":"static/js/4910.1002f7ff.chunk.js","mappings":"u/hiBAsCA,SACIA,aApCG,WACH,OAAOC,CACX,EAmCIC,mBAjCG,WAA8C,IAAlBC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAC7C,OAAKD,EAGUF,EAAUM,QAAQC,GACtBA,EAAML,cAAgBA,IAEnBM,KAAKC,EAAAA,IALR,EAMf,EA0BIC,yBAzBG,SAAkCC,EAAWT,GAChD,GAAKS,GAEAT,EAEL,OAAOU,EAAAA,EAAAA,IAA8BZ,EAAWW,EAAWT,EAC/D,EAoBIW,eAlBG,SAAwBC,GAG3B,GADAC,QAAQC,KAAK,kHACRF,EAEL,OAAOG,EAAAA,EAAAA,IAAgBjB,EAAWc,EACtC,EAaII,cAZJ,SAAuBC,GACnB,OAAOA,EAAUX,MAAK,CAACY,EAAGC,KACfZ,EAAAA,EAAAA,IAAQW,EAAGC,GAAIC,GACX,GAAGA,EAAOpB,eAAeoB,EAAOR,aAGnD,E,+DCrCO,MAAMG,EAAkBA,CAACM,EAAQC,KACpC,GAAIA,GAAkB,MAAVD,EAAgB,CACxB,MAAME,EAAQF,EAAOG,WAAWC,GACrBA,EAAEb,UAAYU,IAEzB,OAAkB,IAAXC,EAAeF,EAAOE,QAASpB,CAC1C,CACgB,EAEPO,EAAgCA,CAACW,EAAQC,EAAMtB,KACxD,GAAIsB,GAAQtB,GAAyB,MAAVqB,EAAgB,CACvC,MAAME,EAAQF,EAAOG,WAAWC,GACrBA,EAAEb,UAAYU,GAAQG,EAAEzB,cAAgBA,IAEnD,OAAkB,IAAXuB,EAAeF,EAAOE,QAASpB,CAC1C,CACgB,EAEb,SAASuB,EAAoBN,GAChC,OAAOA,EAAOO,IAClB,CACO,MAAMpB,EAAU,SAACW,EAAGC,GAEY,IAAvCS,EAAY3B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGyB,EACX,OAAIE,EAAaV,GAAKU,EAAaT,IACvB,EACRS,EAAaV,GAAKU,EAAaT,GACxB,EACJ,CACX,EACaU,EAAuBA,CAACC,EAAMC,IACxBA,EAAIC,KAAKC,GACbC,OAAOC,YAAYL,EAAKE,KAAI,CAACI,EAAKC,IAAU,CAACD,EAAKH,EAAOI,Q","sources":["../node_modules/country-state-city/lib/state.js","../node_modules/country-state-city/lib/utils/index.js"],"sourcesContent":["import stateList from './assets/state.json';\nimport { findEntryByCode, findStateByCodeAndCountryCode, compare } from './utils';\n// Get a list of all states.\nexport function getAllStates() {\n    return stateList;\n}\n// Get a list of states belonging to a specific country.\nexport function getStatesOfCountry(countryCode = '') {\n    if (!countryCode)\n        return [];\n    // get data from file or cache\n    const states = stateList.filter((value) => {\n        return value.countryCode === countryCode;\n    });\n    return states.sort(compare);\n}\nexport function getStateByCodeAndCountry(stateCode, countryCode) {\n    if (!stateCode)\n        return undefined;\n    if (!countryCode)\n        return undefined;\n    return findStateByCodeAndCountryCode(stateList, stateCode, countryCode);\n}\n// to be deprecate\nexport function getStateByCode(isoCode) {\n    // eslint-disable-next-line no-console\n    console.warn(`WARNING! 'getStateByCode' has been deprecated, please use the new 'getStateByCodeAndCountry' function instead!`);\n    if (!isoCode)\n        return undefined;\n    return findEntryByCode(stateList, isoCode);\n}\nfunction sortByIsoCode(countries) {\n    return countries.sort((a, b) => {\n        return compare(a, b, (entity) => {\n            return `${entity.countryCode}-${entity.isoCode}`;\n        });\n    });\n}\nexport default {\n    getAllStates,\n    getStatesOfCountry,\n    getStateByCodeAndCountry,\n    getStateByCode,\n    sortByIsoCode,\n};\n","export const findEntryByCode = (source, code) => {\n    if (code && source != null) {\n        const codex = source.findIndex((c) => {\n            return c.isoCode === code;\n        });\n        return codex !== -1 ? source[codex] : undefined;\n    }\n    return undefined;\n};\nexport const findStateByCodeAndCountryCode = (source, code, countryCode) => {\n    if (code && countryCode && source != null) {\n        const codex = source.findIndex((c) => {\n            return c.isoCode === code && c.countryCode === countryCode;\n        });\n        return codex !== -1 ? source[codex] : undefined;\n    }\n    return undefined;\n};\nexport function defaultKeyToCompare(entity) {\n    return entity.name;\n}\nexport const compare = (a, b, \n// eslint-disable-next-line no-unused-vars\nkeyToCompare = defaultKeyToCompare) => {\n    if (keyToCompare(a) < keyToCompare(b))\n        return -1;\n    if (keyToCompare(a) > keyToCompare(b))\n        return 1;\n    return 0;\n};\nexport const convertArrayToObject = (keys, arr) => {\n    const result = arr.map((subArr) => {\n        return Object.fromEntries(keys.map((key, index) => [key, subArr[index]]));\n    });\n    return result;\n};\n"],"names":["getAllStates","stateList","getStatesOfCountry","countryCode","arguments","length","undefined","filter","value","sort","compare","getStateByCodeAndCountry","stateCode","findStateByCodeAndCountryCode","getStateByCode","isoCode","console","warn","findEntryByCode","sortByIsoCode","countries","a","b","entity","source","code","codex","findIndex","c","defaultKeyToCompare","name","keyToCompare","convertArrayToObject","keys","arr","map","subArr","Object","fromEntries","key","index"],"sourceRoot":""}