{"version":3,"file":"static/js/5704.1a3ae907.chunk.js","mappings":"4/hiBAsCA,SACIA,aApCG,WACH,OAAOC,CACX,EAmCIC,mBAjCG,WAA8C,IAAlBC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAC7C,OAAKD,EAGUF,EAAUM,QAAQC,GACtBA,EAAML,cAAgBA,IAEnBM,KAAKC,EAAAA,IALR,EAMf,EA0BIC,yBAzBG,SAAkCC,EAAWT,GAChD,GAAKS,GAEAT,EAEL,OAAOU,EAAAA,EAAAA,IAA8BZ,EAAWW,EAAWT,EAC/D,EAoBIW,eAlBG,SAAwBC,GAG3B,GADAC,QAAQC,KAAK,kHACRF,EAEL,OAAOG,EAAAA,EAAAA,IAAgBjB,EAAWc,EACtC,EAaII,cAZJ,SAAuBC,GACnB,OAAOA,EAAUX,MAAK,CAACY,EAAGC,KACfZ,EAAAA,EAAAA,IAAQW,EAAGC,GAAIC,GACX,GAAGA,EAAOpB,eAAeoB,EAAOR,aAGnD,E,8yxyPCnCA,MAAMS,EAAO,CACT,OACA,cACA,YACA,WACA,aAEJ,IAAIC,EAAoB,GAExB,SAASC,IAA0B,IAAbC,EAAIvB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGoB,EACzB,GAAIC,EAAkBpB,OAClB,OAAOoB,EAEX,MAAMG,EAAWC,EAEjB,OADAJ,GAAoBK,EAAAA,EAAAA,IAA8B,OAATH,QAA0B,IAATA,EAAkBA,EAAOH,EAAMI,GAClFH,CACX,CAiCA,SACIC,eACAK,iBAjCJ,SAA0B5B,EAAaS,GACnC,OAAKA,GAEAT,EAEYuB,IACOnB,QAAQC,GACrBA,EAAML,cAAgBA,GAAeK,EAAMI,YAAcA,IAEtDH,KAAKC,EAAAA,IAPR,EAQf,EAwBIsB,mBAtBJ,SAA4B7B,GACxB,OAAKA,EAEYuB,IACOnB,QAAQC,GACrBA,EAAML,cAAgBA,IAEnBM,KAAKC,EAAAA,IALR,EAMf,EAeIuB,mBAdJ,SAA4BC,GACxB,OAAOA,EAAOzB,MAAK,CAACY,EAAGC,KACnB,MAAMa,GAASzB,EAAAA,EAAAA,IAAQW,EAAGC,GAAIC,GACnB,GAAGA,EAAOpB,eAAeoB,EAAOX,cAE3C,OAAe,IAAXuB,EACOA,GACJzB,EAAAA,EAAAA,IAAQW,EAAGC,EAAE,GAE5B,E,4EClDO,MAAMJ,EAAkBA,CAACkB,EAAQC,KACpC,GAAIA,GAAkB,MAAVD,EAAgB,CACxB,MAAME,EAAQF,EAAOG,WAAWC,GACrBA,EAAEzB,UAAYsB,IAEzB,OAAkB,IAAXC,EAAeF,EAAOE,QAAShC,CAC1C,CACgB,EAEPO,EAAgCA,CAACuB,EAAQC,EAAMlC,KACxD,GAAIkC,GAAQlC,GAAyB,MAAViC,EAAgB,CACvC,MAAME,EAAQF,EAAOG,WAAWC,GACrBA,EAAEzB,UAAYsB,GAAQG,EAAErC,cAAgBA,IAEnD,OAAkB,IAAXmC,EAAeF,EAAOE,QAAShC,CAC1C,CACgB,EAEb,SAASmC,EAAoBlB,GAChC,OAAOA,EAAOmB,IAClB,CACO,MAAMhC,EAAU,SAACW,EAAGC,GAEY,IAAvCqB,EAAYvC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGqC,EACX,OAAIE,EAAatB,GAAKsB,EAAarB,IACvB,EACRqB,EAAatB,GAAKsB,EAAarB,GACxB,EACJ,CACX,EACaQ,EAAuBA,CAACH,EAAMiB,IACxBA,EAAIC,KAAKC,GACbC,OAAOC,YAAYrB,EAAKkB,KAAI,CAACI,EAAKC,IAAU,CAACD,EAAKH,EAAOI,Q","sources":["../node_modules/country-state-city/lib/state.js","../node_modules/country-state-city/lib/city.js","../node_modules/country-state-city/lib/utils/index.js"],"sourcesContent":["import stateList from './assets/state.json';\nimport { findEntryByCode, findStateByCodeAndCountryCode, compare } from './utils';\n// Get a list of all states.\nexport function getAllStates() {\n    return stateList;\n}\n// Get a list of states belonging to a specific country.\nexport function getStatesOfCountry(countryCode = '') {\n    if (!countryCode)\n        return [];\n    // get data from file or cache\n    const states = stateList.filter((value) => {\n        return value.countryCode === countryCode;\n    });\n    return states.sort(compare);\n}\nexport function getStateByCodeAndCountry(stateCode, countryCode) {\n    if (!stateCode)\n        return undefined;\n    if (!countryCode)\n        return undefined;\n    return findStateByCodeAndCountryCode(stateList, stateCode, countryCode);\n}\n// to be deprecate\nexport function getStateByCode(isoCode) {\n    // eslint-disable-next-line no-console\n    console.warn(`WARNING! 'getStateByCode' has been deprecated, please use the new 'getStateByCodeAndCountry' function instead!`);\n    if (!isoCode)\n        return undefined;\n    return findEntryByCode(stateList, isoCode);\n}\nfunction sortByIsoCode(countries) {\n    return countries.sort((a, b) => {\n        return compare(a, b, (entity) => {\n            return `${entity.countryCode}-${entity.isoCode}`;\n        });\n    });\n}\nexport default {\n    getAllStates,\n    getStatesOfCountry,\n    getStateByCodeAndCountry,\n    getStateByCode,\n    sortByIsoCode,\n};\n","import cityList from './assets/city.json';\nimport { compare, convertArrayToObject } from './utils';\nconst KEYS = [\n    \"name\",\n    \"countryCode\",\n    \"stateCode\",\n    \"latitude\",\n    \"longitude\"\n];\nlet convertedCityList = [];\n// Get a list of all cities.\nfunction getAllCities(keys = KEYS) {\n    if (convertedCityList.length) {\n        return convertedCityList;\n    }\n    const cityJSON = cityList;\n    convertedCityList = convertArrayToObject(keys !== null && keys !== void 0 ? keys : KEYS, cityJSON);\n    return convertedCityList;\n}\n// Get a list of cities belonging to a specific state and country.\nfunction getCitiesOfState(countryCode, stateCode) {\n    if (!stateCode)\n        return [];\n    if (!countryCode)\n        return [];\n    const cityList = getAllCities();\n    const cities = cityList.filter((value) => {\n        return value.countryCode === countryCode && value.stateCode === stateCode;\n    });\n    return cities.sort(compare);\n}\n// Get a list of cities belonging to a specific country.\nfunction getCitiesOfCountry(countryCode) {\n    if (!countryCode)\n        return [];\n    const cityList = getAllCities();\n    const cities = cityList.filter((value) => {\n        return value.countryCode === countryCode;\n    });\n    return cities.sort(compare);\n}\nfunction sortByStateAndName(cities) {\n    return cities.sort((a, b) => {\n        const result = compare(a, b, (entity) => {\n            return `${entity.countryCode}-${entity.stateCode}`;\n        });\n        if (result !== 0)\n            return result;\n        return compare(a, b);\n    });\n}\nexport default {\n    getAllCities,\n    getCitiesOfState,\n    getCitiesOfCountry,\n    sortByStateAndName,\n};\n","export const findEntryByCode = (source, code) => {\n    if (code && source != null) {\n        const codex = source.findIndex((c) => {\n            return c.isoCode === code;\n        });\n        return codex !== -1 ? source[codex] : undefined;\n    }\n    return undefined;\n};\nexport const findStateByCodeAndCountryCode = (source, code, countryCode) => {\n    if (code && countryCode && source != null) {\n        const codex = source.findIndex((c) => {\n            return c.isoCode === code && c.countryCode === countryCode;\n        });\n        return codex !== -1 ? source[codex] : undefined;\n    }\n    return undefined;\n};\nexport function defaultKeyToCompare(entity) {\n    return entity.name;\n}\nexport const compare = (a, b, \n// eslint-disable-next-line no-unused-vars\nkeyToCompare = defaultKeyToCompare) => {\n    if (keyToCompare(a) < keyToCompare(b))\n        return -1;\n    if (keyToCompare(a) > keyToCompare(b))\n        return 1;\n    return 0;\n};\nexport const convertArrayToObject = (keys, arr) => {\n    const result = arr.map((subArr) => {\n        return Object.fromEntries(keys.map((key, index) => [key, subArr[index]]));\n    });\n    return result;\n};\n"],"names":["getAllStates","stateList","getStatesOfCountry","countryCode","arguments","length","undefined","filter","value","sort","compare","getStateByCodeAndCountry","stateCode","findStateByCodeAndCountryCode","getStateByCode","isoCode","console","warn","findEntryByCode","sortByIsoCode","countries","a","b","entity","KEYS","convertedCityList","getAllCities","keys","cityJSON","cityList","convertArrayToObject","getCitiesOfState","getCitiesOfCountry","sortByStateAndName","cities","result","source","code","codex","findIndex","c","defaultKeyToCompare","name","keyToCompare","arr","map","subArr","Object","fromEntries","key","index"],"sourceRoot":""}